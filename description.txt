Desenvolva uma aplicação em que:

1 - O usuário pode clicar em qualquer lugar da página.

2 - Deve-se renderizar um pequeno círculo na posição clicada.

2.1 - A cada clique, mantém-se os círculos já criados e renderiza-se um novo.

3 - Crie duas funcionalidades para a aplicação:
    - Desfazer (undo)
    - Refazer (redo)

--- Ideias iniciais ---

1. Quando o usuário clicar em qualquer ponto da página, será capturada a posição (x,y) onde ele clicou.
Isso passa uma ideia de um event listener de clique (onClick) e que o elemento pai é o 'body' ou um container
com 100% do viewport.

2 e 2.1. Aqui nos passa a ideia de usar estado para armazenar
os dados , pois quando ocorre re-renderizações através
da mudança do estado, os dados não são perdidos entre essas re-renderizações (apenas quando
há unmounting).

3. Funcionalidades de desfazer e refazer...(ainda não pensei sobre).

--- Pensamento na hora de resolver o projeto ---

Primeiro passo: O usuário clicar em algum lugar da página e de alguma forma preciso
capturar as coodernadas do clique do usuário e usar o event listener onClick junto disso.

- Como fiz/pensei?

1. Primeiro tive que fazer a div principal da aplicação ocupar 100% da viewport através do 
height: 100vh e width: 100vw.

2. Depois disso usei a função handleClickGetCoordinates com a tipagem do evento sendo 
React.MouseEvent<HTMLDivElement, MouseEvent> através do event listener onClick na div principal.

3. Depois disso, tive acesso através do objeto de evento ao clientX e clientY que são as coordenadas
de onde o usuário clicou na tela.

4. Por último, setei o estado das coordenadas de forma imutável usando o [...coordinates, {x, y}];

--- // ---

Segundo passo: Agora preciso que cada clique na tela se torne um 'círculo'.

- Como fiz/pensei?

1. Irei criar um componente novo chamado 'Circle' e irei passar as coordenadas para esse compoenente
(x e y) através de props.

2. Basicamente defini a div que representa o círculo como absolute e a div principal como relative,
agora os círculos são posicionados em relação a tela. Além disso corrigi com o transform() a posição
correta do círculo em relação ao clique.

--- // ---

Terceiro passo: Agora tenho que criar a funcionalidade de desfazer e refazer

- Como fiz/pensei?

Inicialmente, tive dificuldade para pensar e entender a lógica para implementar essas funcionalidades.

Para resolver isso, usei a estrutura de dados 'pilha' (stack),
que funciona bem para operações de desfazer e refazer. Implementei a 
funcionalidade da seguinte forma:

Desfazer (undo):

Cada vez que um círculo é adicionado, o estado atual das coordenadas é salvo em uma 
pilha (undoStack).

Quando o usuário clica em desfazer, removo o último estado da pilha de undo e o uso para 
atualizar as coordenadas atuais, retornando ao estado anterior.

O estado das coordenadas atual é então adicionado à redoStack, permitindo que essa
ação possa ser desfeita futuramente.

Refazer (redo):

Quando o usuário clica em refazer, removo o último estado da pilha de redo e o uso para 
atualizar as coordenadas atuais, voltando ao estado que foi desfeito.

O estado das coordenadas atual é então adicionado novamente à pilha de undo, 
permitindo que essa ação possa ser desfeita novamente.